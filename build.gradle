apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "jacoco"
apply plugin: "org.junit.platform.gradle.plugin"
apply plugin: "com.jfrog.artifactory"
apply plugin: "com.jfrog.bintray"

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext{
    bintrayUser = System.getProperty("bintray.user")
    bintrayKey = System.getProperty("bintray.key")
    buildNumber = System.getProperty("build.number")
    isSnapshot = Boolean.valueOf(System.getProperty("snapshot"))
    signPass = System.getProperty("signing.pass")
}

group = "com.configcat"
version = "${version}" + (isSnapshot ? "-SNAPSHOT" : "")

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath ("org.junit.platform:junit-platform-gradle-plugin:1.1.0")
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile group: "com.squareup.okhttp3", name: "okhttp", version:"3.9.1"
    compile group: "org.slf4j", name: "slf4j-api", version:"1.7.25"
    compile group: "com.google.code.gson", name: "gson", version:"2.8.2"
    compile group: "commons-codec", name: "commons-codec", version:"1.11"
    testCompile group: "org.junit.jupiter", name: "junit-jupiter-api", version:"5.1.0"
    testCompile group: "org.slf4j", name: "slf4j-nop", version:"1.7.25"
    testCompile group: "com.squareup.okhttp3", name: "mockwebserver", version:"3.7.0"
    testCompile "org.mockito:mockito-core:2.+"
    testRuntime group: "org.junit.jupiter", name: "junit-jupiter-engine", version:"5.0.1"
}

jar {
    manifest {
        attributes("Implementation-Version": version)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

jacoco {
    applyTo junitPlatformTest
}

task junit5CodeCoverageReport(type:JacocoReport){
    executionData junitPlatformTest
    sourceSets sourceSets.main
    sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
    classDirectories = files(project.sourceSets.main.output)
    reports {
        xml.enabled = true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled = false
        csv.enabled = false
    }
}

check.dependsOn junit5CodeCoverageReport

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    scm {
        url "https://github.com/configcat/java-sdk"
        developerConnection "scm:git:ssh:git@github.com:configcat/java-sdk.git"
        connection "scm:git:git://github.com/configcat/java-sdk.git"
    }

    licenses {
        license {
            name "MIT License"
            url "https://raw.githubusercontent.com/configcat/java-sdk/master/LICENSE"
        }
    }

    organization {
        url "https://configcat.com"
        name "ConfigCat"
    }

    developers {
        developer {
            id "configcat"
            email "developer@configcat.com"
            name "ConfigCat"
        }
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            pom.withXml {
                def root = asNode()
                root.appendNode("description", "ConfigCat is a feature flag, feature toggle, and configuration management service. That lets you launch new features and change your software configuration remotely without actually (re)deploying code. ConfigCat even helps you do controlled roll-outs like canary releases and blue-green deployments.")
                root.appendNode("name", "ConfigCat Java SDK")
                root.appendNode("url", "https://github.com/configcat/java-sdk")
                root.children().last() + pomConfig
            }
        }
    }
}

artifactory {
    contextUrl = "http://oss.jfrog.org"
    publish {
        repository {
            repoKey = "oss-snapshot-local"
            username = bintrayUser
            password = bintrayKey
        }
        defaults {
            publications("mavenPublication")
            publishArtifacts = true
            publishPom = true
        }
    }
    resolve {
        repoKey = "jcenter"
    }
    clientConfig.info.setBuildNumber(buildNumber)
    clientConfig.info.setBuildName("configcat")
}

bintray {
    user = bintrayUser
    key = bintrayKey
    publications = ["mavenPublication"]
    publish = true

    pkg {
        repo = "releases"
        name = "configcat-client"
        desc = "ConfigCat is a feature flag, feature toggle, and configuration management service. That lets you launch new features and change your software configuration remotely without actually (re)deploying code. ConfigCat even helps you do controlled roll-outs like canary releases and blue-green deployments."
        licenses = ["MIT"]
        websiteUrl = "https://configcat.com"
        issueTrackerUrl = 'https://github.com/configcat/java-sdk/issues'
        vcsUrl = "https://github.com/configcat/java-sdk.git"
        githubRepo = "configcat/java-sdk"
        labels = ["configcat", "featureflag"]
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = "build ${buildNumber}"
            released  = new Date()
            gpg {
                sign = true
                passphrase = signPass
            }
        }
    }
}