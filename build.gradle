import com.vanniktech.maven.publish.AndroidSingleVariantLibrary
import com.vanniktech.maven.publish.SonatypeHost

buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath(libs.android.gradle)
    }
}

plugins {
    alias(libs.plugins.sonarqube)
    id "jacoco"
    alias(libs.plugins.mavenPublish)
}

apply plugin: "com.android.library"

android {
    namespace "com.configcat"
    compileOptions {
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        compileSdk 32
        minSdk 21
        consumerProguardFiles("configcat-proguard-rules.pro")
    }
}

ext {
    buildNumber = System.getProperty("build.number")
    isSnapshot = Boolean.valueOf(System.getProperty("snapshot"))
    excludes = [
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*$Result.*',
            '**/*$Result$*.*'
    ]
}

group = "com.configcat"
version = "${version}" + (isSnapshot ? "-SNAPSHOT" : "")

repositories {
    mavenLocal()
    mavenCentral()
    google()
}

dependencies {
    api(libs.android.retrofuture)
    api(libs.okhttp)
    api(libs.okio)
    api(libs.slf4j.api)
    api(libs.gson)
    api(libs.commons.codec)
    api(libs.semantic.version)
    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.junit.jupiter.params)
    testImplementation(libs.logback.classic)
    testImplementation(libs.logback.core)
    testImplementation(libs.mockwebserver)
    testImplementation(libs.mockito.core)
    testRuntimeOnly(libs.junit.jupiter.engine)
}

sonarqube {
    properties {
        property "sonar.projectKey", "configcat_android-sdk"
        property "sonar.projectName", "android-sdk"
        property "sonar.projectVersion", "${version}-${buildNumber}"
        property "sonar.organization", "configcat"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/report.xml"
    }
}

tasks.withType(Test) { useJUnitPlatform() }

task jacocoTestReport(type:JacocoReport){
    dependsOn 'testDebugUnitTest'
    reports {
        html.required.set(false)
        csv.required.set(false)
        xml.required.set(true)
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }

    def classes = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: excludes)
    sourceDirectories.setFrom(files("${project.projectDir}/src/main/java"))
    classDirectories.setFrom(files([classes]))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
    ]))
}

check.dependsOn jacocoTestReport

mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

    def signingInMemoryKey = findProperty("ORG_GRADLE_PROJECT_signingInMemoryKey")
    def signingInMemoryKeyPassword = findProperty("ORG_GRADLE_PROJECT_signingInMemoryKeyPassword")
    if (signingInMemoryKey && signingInMemoryKeyPassword) {
        signAllPublications()
    }

    configure(new AndroidSingleVariantLibrary("release", true, true))

    coordinates(project.group as String, project.name as String, project.version as String)

    pom {
        name = 'ConfigCat Android SDK'
        url = 'https://github.com/configcat/android-sdk'
        description = 'Android SDK for ConfigCat, a feature flag, feature toggle, and configuration management service. That lets you launch new features and change your software configuration remotely without actually (re)deploying code. ConfigCat even helps you do controlled roll-outs like canary releases and blue-green deployments.'

        scm {
            url = "https://github.com/configcat/android-sdk"
            developerConnection = "scm:git:ssh:git@github.com:configcat/android-sdk.git"
            connection = "scm:git:git://github.com/configcat/android-sdk.git"
        }

        licenses {
            license {
                name = "MIT License"
                url = "https://raw.githubusercontent.com/configcat/android-sdk/master/LICENSE"
            }
        }

        organization {
            url = "https://configcat.com"
            name = "ConfigCat"
        }

        developers {
            developer {
                id = "configcat"
                email = "developer@configcat.com"
                name = "ConfigCat"
            }
        }
    }
}


