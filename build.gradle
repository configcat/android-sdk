buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "org.sonarqube" version "3.1.1"
    id "java"
    id "signing"
    id "maven-publish"
    id "jacoco"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    buildNumber = System.getProperty("build.number")
    isSnapshot = Boolean.valueOf(System.getProperty("snapshot"))
}

group = "com.configcat"
version = "${version}" + (isSnapshot ? "-SNAPSHOT" : "")

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation group: "com.squareup.okhttp3", name: "okhttp", version:"3.9.1"
    implementation group: "org.slf4j", name: "slf4j-api", version:"1.7.25"
    implementation group: "com.google.code.gson", name: "gson", version:"2.8.9"
    implementation group: "commons-codec", name: "commons-codec", version:"1.13"
    implementation "net.sourceforge.streamsupport:android-retrofuture:1.7.0"
    implementation 'de.skuzzle:semantic-version:2.1.0'
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter-api", version:"5.1.0"
    testImplementation group: "org.junit.jupiter", name: "junit-jupiter-params", version:"5.1.0"
    testImplementation group: "org.slf4j", name: "slf4j-nop", version:"1.7.25"
    testImplementation group: "com.squareup.okhttp3", name: "mockwebserver", version:"4.9.2"
    testImplementation "org.mockito:mockito-core:2.+"
    testImplementation "net.sourceforge.streamsupport:android-retrofuture:1.7.0"
    testRuntimeOnly group: "org.junit.jupiter", name: "junit-jupiter-engine", version:"5.8.0"
}

jar {
    manifest {
        attributes("Implementation-Version": archiveVersion)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

sonarqube {
    properties {
        property "sonar.projectKey", "configcat_android-sdk"
        property "sonar.projectName", "android-sdk"
        property "sonar.projectVersion", "${version}-${buildNumber}"
        property "sonar.organization", "configcat"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/report.xml"
    }
}

jacoco {
    toolVersion = "0.8.6"
}

test {
    useJUnitPlatform()
}

task junit5CodeCoverageReport(type:JacocoReport){
    dependsOn test
    executionData test
    sourceSets sourceSets.main
    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled = false
        csv.enabled = false
    }
}

check.dependsOn junit5CodeCoverageReport

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'ConfigCat Android SDK'
                url = 'https://github.com/configcat/android-sdk'
                description = 'Android SDK for ConfigCat, a feature flag, feature toggle, and configuration management service. That lets you launch new features and change your software configuration remotely without actually (re)deploying code. ConfigCat even helps you do controlled roll-outs like canary releases and blue-green deployments.'

                scm {
                    url = "https://github.com/configcat/android-sdk"
                    developerConnection = "scm:git:ssh:git@github.com:configcat/android-sdk.git"
                    connection = "scm:git:git://github.com/configcat/android-sdk.git"
                }

                licenses {
                    license {
                        name = "MIT License"
                        url = "https://raw.githubusercontent.com/configcat/android-sdk/master/LICENSE"
                    }
                }

                organization {
                    url = "https://configcat.com"
                    name = "ConfigCat"
                }

                developers {
                    developer {
                        id = "configcat"
                        email = "developer@configcat.com"
                        name = "ConfigCat"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username findProperty('OSSRH_USERNAME')
                password findProperty('OSSRH_PASSWORD')
            }

            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    def signingKey = findProperty("SIGNING_KEY")
    def signingPassphrase = findProperty("SIGNING_PASSPHRASE")
    if (signingKey && signingPassphrase) {
        useInMemoryPgpKeys(signingKey as String, signingPassphrase as String)
        sign publishing.publications.mavenJava
    }
}
